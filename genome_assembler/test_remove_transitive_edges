#!/usr/bin/env python

import unittest
from remove_transitive_edges import simplify
from graph import *

class TestGraphMethods(unittest.TestCase):

    # A graph with no transitive edges should be returned as is
    def test_rte_self(self):
        edges = {
                "A":{"B":1}, 
                "B":{"C":1}
        }
        G = Graph(edges)
        S = simplify(G)
        self.assertTrue(S == G)

    # A simple test with a transitive edge of length 1
    def test_rte_simple(self):
        edges = {
                "A":{"B":1, "C":1},
                "B":{"C":1}
        }
        G = Graph(edges)

        edges = {
                "A":{"B":1}, 
                "B":{"C":1}
        }
        H = Graph(edges)

        S = simplify(G)
        self.assertTrue(S == H)

    # A little more challenging case, where we have two transitive edges, one
    # of length 1 and another of length 2
    def test_rte_two(self):
        edges = {
                "A":{"B":1, "C":1, "D":1},
                "B":{"C":1},
                "C":{"D":1}
        }
        G = Graph(edges)

        edges = {
                "A":{"B":1},
                "B":{"C":1},
                "C":{"D":1}
        }
        H = Graph(edges)

        S = simplify(G)
        self.assertTrue(S == H)


    # Another case that has two transitive edges
    def test_rte_twoo(self):
        edges = {
                "A":{"B":1, "C":1},
                "B":{"C":1, "D":1},
                "C":{"D":1}
        }
        G = Graph(edges)

        edges = {
                "A":{"B":1},
                "B":{"C":1},
                "C":{"D":1}
        }
        H = Graph(edges)

        S = simplify(G)
        self.assertTrue(S == H)

if __name__ == '__main__':
    unittest.main()

